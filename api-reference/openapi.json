{
  "openapi": "3.0.1",
  "info": {
    "title": "PolyAI API Documentation",
    "description": "API schema for all PolyAI API support",
    "license": {
      "name": "MIT"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://api.us-1.platform.polyai.app",
      "description": "US base url"
    },
    {
      "url": "https://api.uk-1.platform.polyai.app",
      "description": "UK base url"
    },
    {
      "url": "https://api.euw-1.platform.polyai.app",
      "description": "EUW base url"
    }
  ],
  "security": [
    {
      "ApiKeyAuth": []
    }
  ],
  "paths": {
    "/v1/{account_id}/{project_id}/conversations": {
      "get": {
        "description": "Returns all conversations matching filters",
        "parameters": [
        {
          "name": "account_id",
          "in": "path",
          "description": "Account ID",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "project_id",
          "in": "path",
          "description": "Project ID",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "client_env",
          "in": "query",
          "description": "Client Environment - sandbox, pre-release or live",
          "schema": {
            "type": "string",
            "enum": [
              "sandbox",
              "pre-release",
              "live"
            ],
            "default": "live"
          },
          "example": "sandbox"
        },
        {
          "name": "start_time",
          "in": "query",
          "description": "The start of the time range of the conversations to get, in ISO8601 format",
          "example": "2021-07-01T14:15:00.000Z",
          "required": false,
          "schema": {
            "type": "string",
            "format": "date-time"
          }
        },
        {
          "name": "end_time",
          "in": "query",
          "description": "The end of the time range of the conversations to get, in ISO8601 format",
          "example": "2021-07-01T16:35:00.000Z",
          "required": false,
          "schema": {
            "type": "string",
            "format": "date-time"
          }
        },
        {
          "name": "limit",
          "in": "query",
          "description": "Max number of conversations to return per API call. If the result set of your query is larger than this, it will be paginated.",
          "required": false,
          "schema": {
            "type": "integer",
            "minimum": 1,
            "maximum": 5000,
            "default": 5
          }
        },
        {
          "name": "offset",
          "in": "query",
          "description": "Offset within result set to fetch.",
          "required": false,
          "schema": {
            "type": "integer",
            "minimum": 0,
            "default": 0
          }
        },
        {
          "name": "include_context_state",
          "in": "query",
          "description": "If true, include the `context_state` for each conversation. This is a large, noisy dictionary of the agent's internal dialogue state at the end of the conversation.",
          "required": false,
          "schema": {
            "type": "boolean",
            "default": false
          }
        },
        {
          "name": "variant_id",
          "in": "query",
          "description": "If it is set, we would return all conversations under this variant_id. Note that you may only specify either one of the variant_id or variant_name",
          "required": false,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "variant_name",
          "in": "query",
          "description": "If it is set, we would return all conversations under this variant_name. Note that you may only specify either one of the variant_id or variant_name. Also, make sure to encode any spaces in the name with \"%20\"",
          "required": false,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "in_progress",
          "in": "query",
          "description": "If it is set to false, we only return finished conversations. If it is set to true, we only return conversations still in progress. By default, this parameter is None and we return all conversations",
          "required": false,
          "schema": {
            "type": "boolean"
          },
          "example": false
        }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "conversations": {
                      "type": "array",
                      "description": "An array of conversations returned in ascending chronological order.",
                      "items": {
                        "$ref": "schema.yaml#/components/schemas/Conversation"
                      }
                    },
                    "descriptions": {
                      "type": "object",
                      "description": "An dictionary of response keys and their descriptions",
                      "properties": {
                        "conversations": {
                          "type": "object",
                          "description": "An dictionary of conversation object keys and their descriptions"
                        }
                      }
                    },
                    "next_offset": {
                      "type": "integer",
                      "description": "If present, the result is being paginated and requires another API call to fetch the next portion (pass the provided `next_offset` as the `offset` param for the next API call)."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "post": {
        "description": "Creates a new plant in the store",
        "requestBody": {
          "description": "Plant to add to the store",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewPlant"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "plant response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Plant"
                }
              }
            }
          },
          "400": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
  },
  "components": {
    "schemas": {
      "responses": {
        "Unauthorized": {
          "description": "Unauthorized",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/responses/Error"
              }
            }
          }
        },
        "BadRequest": {
          "description": "Bad Request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/responses/Error"
              }
            }
          }
        },
        "NotFound": {
          "description": "Not Found",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/responses/Error"
              }
            }
          }
        },
        "InternalError": {
          "description": "Internal Server Error",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/responses/Error"
              }
            }
          }
        },
        "NotImplementedError": {
          "description": "Not Implemented Error",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/responses/Error"
              }
            }
          }
        },
        "Error": {
          "type": "object",
          "properties": {
            "error_message": {
              "description": "Reason for error",
              "type": "string"
            }
          }
        }
      },
      "Plant": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "description": "The name of the plant",
            "type": "string"
          },
          "tag": {
            "description": "Tag to specify the type",
            "type": "string"
          }
        }
      },
      "NewPlant": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Plant"
          },
          {
            "required": [
              "id"
            ],
            "type": "object",
            "properties": {
              "id": {
                "description": "Identification number of the plant",
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ]
      }
    },
    "securitySchemes": {
      "ApiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "x-api-key"
      }
    }
  }
}